@model RegisterModel
@using Nop.Web.Models.Customer;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);
}
<link href="/Themes/DefaultClean/Content/css/bootstrap-datetimepicker.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.12.0/moment.js"></script>
<script src="/Scripts/bootstrap-datetimepicker.js"></script>

@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {

            var selectedItem = 1;
            var ddlStates1 = $("#@Html.FieldIdFor(model => model.LocalityId)");
            var statesProgress = $("#states-loading-progress");
            var neg = 5 - selectedItem;
            for (var i = selectedItem; i <= selectedItem + neg; i++) {
                if ($('#ChildDiv' + i).length) {
                    $('#ChildDiv' + i).remove();
                }
            }

            for (var i = 1; i <= selectedItem; i++) {

                if ($('#ChildDiv' + i).length) {

                }
                else {
                   
                   

                    var data = '<div class="col-sm-12" id="ChildDiv' + i + '">'
                               + '<div class="inputs  col-sm-6 nopadding" id="Name' + i + '">'
                               + '<label>Child Name :</label>'
                               + '<input type="text"  class="text-box form-control" name="Name' + i + '"  />'
                               + '</div>'
                               + '<div class="inputs  col-sm-6 nopadding">'
                               + '<label>BirthDate :</label>'
                            + '<div class="input-group date" id="datetimepicker1">'
                            + '<input type="text" class="BirthDate text-box form-control" id="BirthDate' + i + '"  name="BirthDate' + i + '" />'
                            + '<span class="input-group-addon">'
                            + '<span class="glyphicon glyphicon-calendar"></span>'
                            + '</span> '
                            + '</div>'
                            + ''
                            + '</div>'
                            + '</div>'
                    
                    $("#divID").append(data);
                    $('.BirthDate').datetimepicker({
                        format: 'DD/MM/YYYY'
                    });
                }
            }


            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#state-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });

            $("#@Html.FieldIdFor(model => model.ShippingCountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.ShippingStateProvinceId)");
                var statesProgress = $("#shippingstate-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });

            $("#@Html.FieldIdFor(model => model.StateProvinceId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.CityId)");
                var statesProgress = $("#city-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetCitiesByStateProvinceId"))",
                    data: { "stateProvinceId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve cities.');
                        statesProgress.hide();
                    }
                });
            });

            $("#@Html.FieldIdFor(model => model.ShippingStateProvinceId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.ShippingCityId)");
                var statesProgress = $("#shippingcity-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetCitiesByStateProvinceId"))",
                    data: { "stateProvinceId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve cities.');
                        statesProgress.hide();
                    }
                });
            });

            $("#@Html.FieldIdFor(model => model.CityId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.LocalityId)");
                var statesProgress = $("#locality-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetLocalitiesByCityId"))",
                    data: { "cityId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve localities.');
                        statesProgress.hide();
                    }
                });
            });
            $("#@Html.FieldIdFor(model => model.ShippingCityId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.ShippingLocalityId)");
                var statesProgress = $("#shippinglocality-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetLocalitiesByCityId"))",
                    data: { "cityId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve localities.');
                        statesProgress.hide();
                    }
                });
            });

            $("form").submit(function (e) {

                if ($('#chkshippingaddress').is(':checked')) {

                    //$("#ShippingStreetAddress").val($("#StreetAddress").val());
                    //$("#ShippingStreetAddress2").val($("#StreetAddress2").val());
                    //$("#ShippingZipPostalCode").val($("#ZipPostalCode").val());
                    //$("#ShippingCountryId").val( $("#ShippingCountryId").val());
                } else {

                    if ($('#ShippingStreetAddress').val() == null && $('#ShippingStreetAddress').val() == '') {
                        e.preventDefault(e);
                        alert('Street Address Required');
                    }

                    if ($('#ShippingStreetAddress2').val() == null && $('#ShippingStreetAddress2').val() == '') {
                        e.preventDefault(e);
                        alert('Street Address2 Required');
                    }

                    if ($('#ShippingZipPostalCode').val() == null && $('#ShippingZipPostalCode').val() == '') {
                        e.preventDefault(e);
                        alert('ZipPostal Code Required');
                    }

                    if ($('#ShippingCountryId').val() == 0) {
                        e.preventDefault(e);
                        alert('Shipping Country Required');
                    }

                    if ($('#ShippingStateProvinceId').val() == 0) {
                        e.preventDefault(e);
                        alert('Shipping State Province Required');
                    }

                    if ($('#ShippingCityId').val() == 0) {
                        e.preventDefault(e);
                        alert('Shipping City Required');
                    }

                    if ($('#ShippingLocalityId').val() == 0) {
                        e.preventDefault(e);
                        alert('Shipping Locality Required');
                    }
                }
            });

            $('#chkshippingaddress').change(function () {
                if (this.checked) {
                    $('#shippingaddress').hide();

                    //$("#ShippingStreetAddress").val($("#StreetAddress").val());
                    //$("#ShippingStreetAddress2").val($("#StreetAddress2").val());
                    //$("#ShippingZipPostalCode").val($("#ZipPostalCode").val());
                    //$("#ShippingCountryId").val( $("#ShippingCountryId").val());
                } else {
                    $('#shippingaddress').show();
                }
            });

            $('#chkshippingaddress').prop('checked', true);
            $('#shippingaddress').hide();

            $("#@Html.FieldIdFor(model => model.NoOfChildren)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.LocalityId)");
                var statesProgress = $("#state-loading-progress");
                var neg = 5 - selectedItem;
                for (var i = selectedItem; i <= selectedItem + neg; i++) {
                    if ($('#ChildDiv' + i).length) {
                        $('#ChildDiv' + i).remove();
                    }
                }

                for (var i = 1; i <= selectedItem; i++) {

                    if ($('#ChildDiv' + i).length) {

                    }
                    else {
                       
                        var data = '<div class="col-sm-12" id="ChildDiv' + i + '">'
                                   + '<div class="inputs col-sm-6 nopadding" id="Name' + i + '">'
                                   + '<label>Child Name :</label>'
                                   + '<input type="text" class="text-box form-control" name="Name' + i + '"    />'
                                   + '</div>'
                                   + '<div class="inputs col-sm-6 nopadding">'
                                   + '<label>BirthDate :</label>'
                                   + '<div class="input-group date" id="datetimepicker1">'
                                   + '<input type="text" class="BirthDate text-box form-control" id="BirthDate' + i + '"  name="BirthDate' + i + '" />'
                                   + '<span class="input-group-addon">'
                                   + '<span class="glyphicon glyphicon-calendar"></span>'
                                   + '</span> '
                                   + '</div>'
                                   + ''
                                   + '</div>'
                                   + '</div>'
                       
                        $("#divID").append(data);
                        $('.BirthDate').datetimepicker({
                            format: 'DD/MM/YYYY'
                        });
                    }
                }
            });
        });
    </script>
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="page registration-page article">
        <div class="page-title">
            <h1>@T("Account.Register")</h1>
        </div>
        <div class="page-body woocommerce">
            @{
    var validationSummary = Html.ValidationSummary(true);
            }
            @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
            {
                <div class="message-error">@validationSummary</div>
            }
            @Html.Partial("_ExternalAuthentication.AssociateMessage")

            <div class=" fieldset  col-sm-12">
                <div class="title">
                    <h3>@T("Account.YourPersonalDetails")</h3>
                </div>
                <div class="form-fields">
                    <div class="col-sm-12">
                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.FirstName, new { }, ":")
                            @Html.EditorFor(model => model.FirstName)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.FirstName)
                        </div>
                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.LastName, new { }, ":")
                            @Html.EditorFor(model => model.LastName)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.LastName)
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.Email, new { }, ":")
                            @Html.EditorFor(model => model.Email)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>
                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.Phone, new { }, ":")
                            @Html.EditorFor(model => model.Phone)
                            @if (Model.PhoneRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.Phone)
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.Company, new { }, ":")
                            @Html.EditorFor(model => model.Company)
                            @if (Model.CompanyRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.Company)
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="inputs  col-sm-6">
                            @Html.LabelFor(model => model.StreetAddress, new { }, ":")
                            @Html.EditorFor(model => model.StreetAddress)
                            @if (Model.StreetAddressRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.StreetAddress)
                        </div>

                        <div class="inputs  col-sm-6">
                            @Html.LabelFor(model => model.StreetAddress2, new { }, ":")
                            @Html.EditorFor(model => model.StreetAddress2)
                            @if (Model.StreetAddress2Required)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.StreetAddress2)
                        </div>
                    </div>
                    <div class="col-sm-12">
                       

                        <div class="inputs  col-sm-6">
                            @Html.LabelFor(model => model.CountryId, new { }, ":")
                            @Html.DropDownList("CountryId", Model.AvailableCountries)
                            @if (Model.CountryRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.CountryId)
                        </div>

                        <div class="inputs  col-sm-6">
                            @Html.LabelFor(model => model.StateProvinceId, new { }, ":")
                            @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                            @if (Model.StateProvinceRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.StateProvinceId)
                            <span id="state-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="inputs  col-sm-6">
                            <label for="CityId">City:</label>
                            @Html.DropDownList("CityId", Model.AvailableCities)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.CityId)
                            <span id="city-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                        <div class="inputs col-sm-6">
                            <label for="LocalityId">Locality:</label>
                            @Html.DropDownList("LocalityId", Model.AvailableLocalities)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.LocalityId)
                            <span id="locality-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.ZipPostalCode, new { }, ":")
                            @Html.EditorFor(model => model.ZipPostalCode)
                            @if (Model.ZipPostalCodeRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.ZipPostalCode)
                        </div>
                    </div>
                </div>
            </div>


            <div class="fieldset  col-sm-12">
                <div class="title">
                    <h3>Delivery Address<input type="checkbox" checked="checked" id="chkshippingaddress" /> Same as Billing address</h3>
                </div>
                <div class="form-fields" id="shippingaddress">

                    <div class="col-sm-12">
                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.ShippingStreetAddress, new { }, ":")
                            @Html.EditorFor(model => model.ShippingStreetAddress)
                            @if (Model.StreetAddressRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.ShippingStreetAddress)
                        </div>

                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.ShippingStreetAddress2, new { }, ":")
                            @Html.EditorFor(model => model.ShippingStreetAddress2)
                            @if (Model.StreetAddress2Required)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.ShippingStreetAddress2)
                        </div>

                    </div>
                    <div class="col-sm-12">


                        @if (Model.CityEnabled)
                        {
                            <div class="inputs col-sm-6">
                                @Html.LabelFor(model => model.ShippingCity, new { }, ":")
                                @Html.EditorFor(model => model.ShippingCity)
                                @if (Model.CityRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.ShippingCity)
                            </div>
                        }

                        <div class="inputs col-sm-6">
                            <label for="ShippingCountryId">Country:</label>
                            @Html.DropDownList("ShippingCountryId", Model.AvailableShippingCountries)
                            @if (Model.CountryRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.ShippingCountryId)
                        </div>

                        <div class="inputs col-sm-6">
                            <label for="ShippingStateProvinceId">State:</label>
                            @Html.DropDownList("ShippingStateProvinceId", Model.AvailableShippingStates)
                            @if (Model.StateProvinceRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.ShippingStateProvinceId)
                            <span id="shippingstateprovince-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                    </div>
                    <div class="col-sm-12">

                        <div class="inputs col-sm-6">
                            <label for="ShippingCityId">City:</label>
                            @Html.DropDownList("ShippingCityId", Model.AvailableShippingCities)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.ShippingCityId)
                            <span id="shippingcity-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                        <div class="inputs col-sm-6">
                            <label for="ShippingLocalityId">Locality:</label>
                            @Html.DropDownList("ShippingLocalityId", Model.AvailableShippingLocalities)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.ShippingLocalityId)
                            <span id="shippinglocality-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="inputs col-sm-6">
                            @Html.LabelFor(model => model.ShippingZipPostalCode, new { }, ":")
                            @Html.EditorFor(model => model.ShippingZipPostalCode)
                            @if (Model.ZipPostalCodeRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.ShippingZipPostalCode)
                        </div>
                    </div>
                </div>

            </div>

            <div class="fieldset  col-sm-12">
                <div class="title">
                    <h3>Children</h3>
                </div>
                <div class="form-fields">

                    <div class="col-sm-12">
                        @Html.LabelFor(model => model.NoOfChildren, new { }, ":")
                        @Html.DropDownList("NoOfChildren", Model.AvailableChildren)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.NoOfChildren)
                        <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                    </div>
                    <div id="divID">

                    </div>
                </div>
            </div>


            <div class="fieldset  col-sm-12">
                <div class="title">
                    <h3>@T("Account.YourPassword")</h3>
                </div>
                <div class="form-fields col-sm-12">
                    <div class="inputs  col-sm-6">
                        @Html.LabelFor(model => model.Password, new { }, ":")
                        @Html.EditorFor(model => model.Password)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>
                    <div class="inputs  col-sm-6">
                        @Html.LabelFor(model => model.ConfirmPassword, new { }, ":")
                        @Html.EditorFor(model => model.ConfirmPassword)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            @Html.Raw(Html.GenerateCaptcha())
                        </div>
                    }
                    @if (Model.HoneypotEnabled)
                    {
                        @Html.Raw(Html.GenerateHoneypotInput())
                    }
                </div>
            </div>

            @if (Model.AcceptPrivacyPolicyEnabled)
            {
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#register-button').click(function () {
                            if ($('#accept-privacy-policy').is(':checked')) {
                                //do some stuff
                                return true;
                            }
                            else {
                                //just show validation errors, dont post
                                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                return false;
                            }
                        });
                    });
                </script>
                <div class="accept-privacy-policy col-sm-12 ">
                    <input id="accept-privacy-policy" type="checkbox" name="accept-privacy-policy" />
                    <label for="accept-privacy-policy">@T("Account.Fields.AcceptPrivacyPolicy")</label>
                    <span class="read" onclick="javascript:OpenWindow('@Url.RouteUrl("TopicPopup", new { SystemName = "privacyinfo" })', 450, 500, true)">@T("Account.Fields.AcceptPrivacyPolicy.Read")</span>
                </div>
            }
            <div class="buttons col-sm-12 woocommerce">
                <input type="submit" id="register-button" style="min-width:300px;" class="register-next-step-button woocommerce_checkout_place_order" value="@T("Account.Register.Button")" name="register-button" />
            </div>
        </div>

    </div>
}