@model MyToyBoxModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Web.Models.Checkout
@using Nop.Web.Models.Customer
@using Nop.Core.Infrastructure
@using Nop.Web.Models.BorrowCart
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.BorrowCart").Text);
}
@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.DeliveredItems })
}

 
<div class="page mytoybox-page article">
   <div class="page-title">
       <h1>
           @if (Model.IsEditable)
           {
               @T("MyToyBox")
           }
           else
           {
               @String.Format(T("MyToyBox.MyToyBoxOf").Text, Model.CustomerFullname)
           }
       </h1>
      

   </div>
    <div class="col-sm-12">
        @*Please add 10 toys to your 'My Toy Box' to activate it if you have a Toys only plan. If you have a Toys and Puzzle/Book plan, please add 10 Toys as well as 10 Puzzle/Books.*@
    </div>
   <div class="page-body"> 
       @if (Model.Items.Count > 0)
       {
           <div class="mytoybox-content">
               @if (Model.Warnings.Count > 0)
               {
               <div class="message-error">
                   <ul>
                       @foreach (var warning in Model.Warnings)
                       {
                           <li>@warning</li>
                       }
                   </ul>
               </div>
               }
               @using (Html.BeginRouteForm("MyToyBox", FormMethod.Post))
               {
               <div class="table-wrapper">
                   <table class="cart">
                       <colgroup>
                          
                           
                           @if (Model.ShowSku)
                           {
                               <col width="1" />
                           }
                           @if (Model.ShowProductImages)
                           {
                               <col width="1" />
                           }
                           <col />
                           <col width="1" />
                           <col width="1" />
                           <col width="1" />
                           @if (Model.IsEditable)
                           {
                               <col width="1" />
                           }
                       </colgroup>
                       <thead>
                           <tr>
                              
                              
                               @if (Model.ShowSku)
                               {
                                   <th class="sku">
                                       @T("BorrowCart.SKU")
                                   </th>
                               }
                               @if (Model.ShowProductImages)
                               {
                                   <th class="product-picture">
                                       @T("BorrowCart.Image")
                                   </th>
                               }
                               <th class="product">
                                   @T("BorrowCart.Product(s)")
                               </th>
                               <th class="subtotal">
                                   Borrow
                               </th>

                               @if (Model.IsEditable)
                               {
                                   <th class="remove-from-cart">
                                       @T("BorrowCart.Remove")
                                   </th>
                               }

                           </tr>
                       </thead>
                       <tbody>
                           @foreach (var item in Model.Items)
                           {
                               <tr>
                                  
 
                                   @if (Model.ShowSku)
                                   {
                                       <td class="sku">
                                           <label class="td-title">@T("BorrowCart.SKU"):</label>
                                            <span class="sku-number">@item.Sku</span>
                                       </td>
                                   }
                                   @if (Model.ShowProductImages)
                                   {
                                       <td class="product-picture">
                                           <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                       </td>
                                   }
                                   <td class="product">
                                       <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name">@item.ProductName</a>
                                       @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                       {
                                           <div class="attributes">
                                               @Html.Raw(item.AttributeInfo)
                                           </div>
                                       }
                                       @if (!String.IsNullOrEmpty(item.RecurringInfo))
                                       {
                                           <div class="recurring-info">
                                               @Html.Raw(item.RecurringInfo)
                                           </div>
                                       }
                                       @if (!String.IsNullOrEmpty(item.RentalInfo))
                                       {
                                           <div class="rental-info">
                                               @Html.Raw(item.RentalInfo)
                                           </div>
                                       }
                                       @if (item.Warnings.Count > 0)
                                       {
                                           <div class="message-error">
                                               <ul>
                                                   @foreach (var warning in item.Warnings)
                                                   {
                                                       <li>@warning</li>
                                                   }
                                               </ul>
                                           </div>
                                       }
                                   </td>
                                   
                                   <td class="subtotal">
                                       <label class="td-title">@T("BorrowCart.ItemTotal"):</label>
                                       @if (item.IsStockAvailable) { 
                                       <input type="button" class="btnUp btn btn-default bootstrap-touchspin-up button-2 product-box-add-to-cart-button" value="Borrow Item" id="btnUp" data-prop="@item.Id" />
                                       }
                                       else
                                       {
                                           <span>Out in Circulation</span>
                                       }
                                   </td>
                                    @if (Model.IsEditable)
                                   {
                                       <td class="remove-from-cart" style="text-align:center">
                                           <label class="td-title">@T("BorrowCart.Remove"):</label>
                                           <input style="visibility:hidden;display:none;" type="checkbox" name="removefromcart" value="@(item.Id)" />
                                           <a class="btnRemove" id="btnRemove" data-prop="@item.ProductId"><img style="width:30px;" src="/Content/Images/cartremove.png" /></a>
                                       </td>
                                   }
                               </tr>
                           }
                       </tbody>
                   </table>
               </div>
               if (Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
               {
               var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
               //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
               //of course, you can modify appropriate locales to include VAT info there
               <div class="tax-shipping-info">
                   @T(inclTax ? "MyToyBox.TaxShipping.InclTax" : "MyToyBox.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
               </div>
               }
               
               }
           </div>
       }
       else
       {
           <div class="no-data" style="padding:25px 0;">
               <h4>@T("MyToyBox.CartIsEmpty")</h4>
           </div>
       }
       
   </div>

    <div class="table-wrapper" style="margin-top:25px;">
        <table class="cart">
            <colgroup>
                <col width="1" />
                <col width="1" />
                <col width="1" />
            </colgroup>
            <thead>
                <tr>
                    <th class="subtotal">
                        Category Name
                    </th>
                    <th class="subtotal">
                        Allowed MyToyBox Quantity
                    </th>
                    <th class="subtotal">
                        Used MyToyBox Quantity
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.PlanCategoryModels)
                {
                    <tr>
                        <td class="quantity">
                            <span class="product-quantity">@item.CategoryName</span>
                        </td>
                        <td class="quantity">
                            <span class="product-quantity">@item.MyToyBoxQuantity</span>
                        </td>

                        <td class="quantity">
                            <span class="product-quantity">@item.UsedMyToyBoxQuantity</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>









<script type="text/javascript">


    var waitingDialog = waitingDialog || (function ($) {
        'use strict';

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
                '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
                '<div class="modal-body">' +
                    '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
                '</div>' +
            '</div></div></div>');

        return {

            show: function (message, options) {
                // Assigning defaults
                if (typeof options === 'undefined') {
                    options = {};
                }
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: '',
                    onHide: null // This callback runs after the dialog was hidden
                }, options);

                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Adding callbacks
                if (typeof settings.onHide === 'function') {
                    $dialog.off('hidden.bs.modal').on('hidden.bs.modal', function (e) {
                        settings.onHide.call($dialog);
                    });
                }
                // Opening dialog
                $dialog.modal();
            },
            /**
             * Closes dialog
             */
            hide: function () {
                $dialog.modal('hide');
            }
        };

    })(jQuery);

    $(function () {
        $('.btnRemove').click(function () {
            console.log('s');
            var prop = $(this).attr('data-prop');
            console.log(prop);

            $.ajax({
                type: 'POST',
                url: '/removeproducttobox',
                data: { "ProductId": prop },
                cache: false,
                success: function (data) {
                    window.location.reload(true);
                },
                error: function () {
                    window.location.reload(true);
                }
            });
        });

        $(".btnUp").on('click', function () {
            var item = $(this).closest("tr")   // Finds the closest row <tr>
                      .find(".qty-input");   // Gets a descendent with class="nr"
            // Retrieves the text within <td>
            item.val(parseInt(item.val()) + 1);
            var prop = $(this).attr('data-prop');
            console.log(prop);
            waitingDialog.show();
            $.ajax({
                type: 'POST',
                url: '/borrowmytoyboxproduct',
                data: { "Id": prop },
                cache: false,
                success: function (data) {
                    if (data.success == 1) {
                        window.location.reload(true);
                    } else if (data.success == 99) {
                        alert("No paid subscription order found.");
                    } else {
                        if (data.message.length > 0) {
                            alert(data.message);
                        } else {
                            alert("No paid subscription order found.");
                        }
                    }
                    waitingDialog.hide();
                },
                error: function () {
                    waitingDialog.hide();
                    window.location.reload(true);
                }
            });

        });



    });
</script>